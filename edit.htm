<!DOCTYPE html>
<html>
<head>
	<meta charset="UTF-8" />
	<link REL="SHORTCUT ICON" HREF="img/favicon.ico">
	<title>S C A L E &nbsp;Course Editor</title>
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
	<script src="https://apis.google.com/js/api.js"></script>
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
	<link rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.css">
	<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
	<script src="lib/jquery.ui.touch-punch.min.js"></script>
	<script src="doc.js"></script>
	<script src="rules.js"></script>
	<script src="ckeditor/ckeditor.js"></script>
 	<style type="text/css">
		 body { 			font-family: Verdana,Geneva,sans-serif; font-size:14px; padding:0; margin:0; 
		 					box-sizing: border-box; background-color: #eee;	
							}
		.wm-main { 			width:100%;  overflow:auto;  display:none; min-width:1450px;
							}
		.wm-nav {	 		float:left; overflow:hidden; padding:24px; width: calc(100vw - 1100px); min-width:360px; 
							}
		.wm-confirm {		position: absolute;  width: 300px; padding: 16px; left: calc(50% - 150px); top: calc(50% - 50px); user-select: none;	
							border-radius: 8px; background-color: #fff; border: 1px solid #999; box-shadow: 4px 2px 12px 2px #aaa; 
							}
		.wm-content {		width:1000px; overflow:hidden; float:right; margin-right:24px; 
							}
		.wm-splash { 		width:100%; color:#999; text-align:center; margin-top:10%; display:none;
							}
		.wm-header { 		background-color: #bbb; width:100%; color:#fff;	padding: 8px 0px;
							}
		.wm-logo { 			height:30px; vertical-align: top; margin:0px 16px; cursor:pointer;
							}
		.wm-courseTitle { 	font-size: 24px; font-weight: bold; margin-right:32px; cursor:pointer;
							}
		.wm-pageTitle {		color:#333;	font-size: 24px; text-align:center; font-weight: bold; padding-top:16px; padding-bottom:8px;
							}
		.wm-stepEditor {	width:525px; overflow:hidden; margin:24px; background-color: #fff; border: 1px solid #999;
							padding:32px; border-radius: 16px;
							}
		.wm-popup {			position: absolute;  width: auto; padding: 12px; left: calc(50% - 100px); top: calc(50% - 50px);
							border-radius: 8px; background-color: #fff; border: 1px solid #009900; box-shadow: 4px 2px 12px 2px #aaa; 
							text-align:center; display: none;
							}
		.wm-is {			border-radius:10px; padding-left:8px; padding-right:8px; padding-top:1px;
							border:1px solid #999; font-size:12px; height:20px; width:300px;
							}
		.wm-bs {			border-radius: 16px; padding-left: 8px; padding-right: 8px; display: inline-block; height: 17px; padding-top: 1px;
							font-size: 12px; background-color: #27ae5f; cursor: pointer; text-align: center; color:#fff; user-select: none;
							}
		.wm-tree {      	user-select: none; width: 100%; margin-left:40px;
							padding: 0px 0; font-size: 14px; text-align: left; 
							}

		.wm-tree ul { 		list-style: none outside none; padding: 0 }
		.wm-tree li a { 	line-height: 20px; cursor: pointer; }
		.wm-tree > ul > li > a { color:#000; display: block;  font-weight: normal; position: relative; text-decoration: none; }
		.wm-tree li.parent > a { padding: 0 0 0 16px;  }
		.wm-tree li.parent > a:before { background-image: url("img/treebuts.gif"); content: ""; display: block;
										height: 11px; left: 0; position: absolute; top: 4px; width: 11px;  background-position: 0px;
										}
		.wm-tree ul li.active > a:before { background-position: 22px; }
		.wm-tree ul li ul 	{ border-left: 1px solid #ccc;  display: none; margin: 0 0 0 5px; padding: 0 0 0 10px; }
		.wm-tree ul li ul li { position: relative; }

	</style>

</head>
<body>

	<div id='mainDiv' class='wm-main'>
		<div id='headerDiv' class='wm-header'>
			<img src='img/scaleLogoWhite.png' class='wm-logo'>
				<span id='courseTitle' class='wm-courseTitle'>Course</span>
				<span id='menuMsg' style='display:none;margin-left:32px'></span>
				<img id='showgdoc' style='cursor:pointer;float:right;margin-right:8px' src='img/gdrive.png'>
			</div>
		<div id='navDiv' class='wm-nav'></div>
		<div class='wm-content'>
			<div id='contentDiv'></div>
			<div id='editorDiv'>
				<textarea class='ckeditor' id='editor1' name='editor1'></textarea>
				<br><div style='float:right'>id: <input class='wm-is' type='text' style='width:60px;height:15px;text-align:center' id='paneId'></div>
				<div style='margin-left:470px'>
					<div id='savePaneBut' class='wm-bs'>Save changes</div>&nbsp;&nbsp;
					<img id='removePaneBut' style='vertical-align:-5px' src='img/trashbut.gif'>	
				</div>
				<div style='float:right' id='paneId'></div>
			</div>
		</div>
	</div>
	<div id='splashDiv' class='wm-splash'>
		<img src='img/scalelogo.png'><br><br>
		<h1 style='font-size:18pt;font-family:trebuchet ms,sans-serif'><p>S C A L E &nbsp;Editor</p>Student-Centered Adaptive Learning Environment</h1>
		<p style='font-weight:bold;font-size:48px'><b>Course editor</b></p>
	</div>
		
<script>

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// APP
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class App  {																

	constructor(id)   															// CONSTRUCTOR
	{
		app=this;
		this.con=new Content();														// Alloc content
		this.tree=null;																// Holds lobs tree
		this.previewWin=false;														// If preview window is open or closed
		this.undos=[];																// Holds undos
		this.curUndo=0;																// Undo counter
		this.InitCourse(id)															// Init course
		this.setDone=true;															// Controls if we set status just by viewing pane
		this.skipDone=false;														// Controls if panes are skipped if status == 10
		this.hideHeader=false;														// Controls header is hidden
		this.assessLevel=.5;														// Level to pass assessment
		this.reportLevel=0;															// Report only final grade of assessment
		this.reportLink="";															// Link to form
		this.login=false;															// No need to login
		this.discussion="";															// No discussion
		this.defMargin=0;															// Default margin
	}

	InitCourse(id)
	{
		this.doc=new Doc(id);														// Alloc doc w/ course id
		this.rul=new Rules();														// Rules
		this.floats=[];																// Holds floats
		this.editorChange=0;														// Tracks edits
		this.setDone=true; this.skipDone=false; this.assessLevel=.5;				// Defaults
		this.Draw(); 																// Draw app
	}

	Draw() 																		// REDRAW
	{
		this.doc.Draw();															// Reset various params
		this.con.Draw();															// Reset various params
		DrawNav();																	// Draw navigation
	}

	Do()																		// DO
	{
		this.undos[this.curUndo]=app.doc.MakeTabFile();								// Save undo
		this.curUndo++;																// Inc undo count
	}
	
	UnDo()																		// UNDO
	{
		if (this.curUndo < 1)														// Nothing to undo
			return;																	// Quit
		app.doc.InitFromTSV(this.undos[this.curUndo-1]);							// Init show from undo
		app.Draw();																	// Redraw
		this.curUndo--;																// Dec undo count
		Sound("ding");																// Ding
	}

}																					// CLASS CLOSURE

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// INIT
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	var app=null;																	// Hold course data 
	$(document).ready(function() {													// WHEN PAGE LOADED
		if (window.addEventListener) 												// If supported this way
			window.addEventListener("message",eventHandler,false);					// Add event handler
		else																		// Use other method
			window.attachEvent("message",eventHandler);								// Add handler

	var h=$(window).height()-300;													// Editor height
	$("#mainDiv").fadeIn(0),h+=44;													// Load fast (account for CK sizing bug)
	
	var url=window.location.search.substring(1);						   			// Get query string
	if (!url)																		// No lobs id set
		url="1LSnAM3A62AQipZfqxDtlOjt4MWJ0fBP22cdyqJqEj5M";							// Use this one
	app=new App(url);																// Alloc doc w/ course id
	app.previewWin=window.open("index.html?preview","scalePreview");				// Open preview tab
	CKEDITOR.on('instanceLoaded', function(e) { e.editor.resize("100%", h)});		// Resize editor
	CKEDITOR.instances.editor1.on('change', function(e) { app.editorChange++});		// We've changed something

	$("#showgdoc").on("click",function() {											// Show google doc
		window.open("https://docs.google.com/spreadsheets/d/"+app.doc.courseId,"_blank");	// Show it	
		});
	
	$(window).on("keydown",function(e) {											// HANDLE KEYPRESS
		if ((e.which == 84) && e.altKey && e.ctrlKey) {								// Test key (Ctrl+Alt+T)
			GoogleDriveLoad(true, function(e) {trace(e)})
			}
		});

	});

	function eventHandler(e)													// ON HTML5 EVENT
	{
		if (e.data && e.data.match(/INS:/))	{										// Insert macro
			CKEDITOR.instances.editor1.insertText(e.data.substring(4));				// Insert text	
			Sound("ding");															// Ding	
			}
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// NAVIGATION
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	function DrawNav()															// DRAW COURSE NAVIGATION
	{
		var i,o;
		$("#courseTitle").html(app.doc.lobs[0].name);								// Show course name
		var str="<b>Learning panes:</b><i> (Click to edit)</i><br>";				// Tree label
		str+="<div id='treeDiv' class='wm-tree'></div>";							// Add div to hold tree
		str+="<div id='addPaneBut' class='wm-bs'>Add new pane</div>&nbsp;&nbsp;";	// Add button
		str+="<br><br><hr><br><table class='wm-navTable'>";							// Line and table
		str+="<tr><td><b>Floats&nbsp;</b></td><td>"+MakeSelect("floatsBut",false,["Choose"])+"</td><td>&nbsp;<div id='addFloatBut' class='wm-bs'>Add</div></td>";
		str+="<tr><td><b>Questions&nbsp;</b></td><td>"+MakeSelect("asksBut",false,["Choose"])+"</td><td>&nbsp;<div id='addAskBut' class='wm-bs'>Add</div></td>";
		str+="<tr><td><b>Rules&nbsp;</b></td><td>"+MakeSelect("rulesBut",false,["Choose"])+"</td><td>&nbsp;<div id='addRuleBut'  class='wm-bs'>Add</div></td>";
		str+="</table>";
		str+="<br><hr><br><div id='saveCourseBut' class='wm-bs'>Save course</div>&nbsp;&nbsp;&nbsp;";
		str+="<div id='previewBut' class='wm-bs'>Preview course</div>&nbsp;&nbsp;&nbsp;";
		str+="<div id='undoBut' class='wm-bs'>Undo</div>&nbsp;&nbsp;&nbsp;";
		str+="<div id='settingsBut' class='wm-bs'>Settings</div>";
		str+="<br><br><textarea id='outputDiv' class='wm-is'style='height:50px;width:auto;overflow:hidden'></textarea>";
		str+="<br><br>Help <img src='img/helpicon.gif' style='vertical-align:-4px;cursor:pointer' id='showHelp'>"; 

		$("#navDiv").html(str);														// Draw nav part
		app.tree=new Tree();														// Show lobs tree				
		app.doc.SetCurVars(2);														// Set current areas																								
		for (i=0;i<app.rul.rules.length;++i) {										// For each rule
			o=app.rul.rules[i];														// Point at rule
			$("#rulesBut").append("<option value='"+o.id+"'>"+o.id+" - "+o.name+"</option>");	// Add to pulldown
			}
		for (i=0;i<app.doc.asks.length;++i) {										// For each ask
			o=app.doc.asks[i];														// Point at ask
			$("#asksBut").append("<option value='"+o.id+"'>"+o.id+" - "+o.name+"</option>");	// Add to pulldown
			}
		for (i=1;i<app.doc.lobs.length;++i) {										// For each lob
			o=app.doc.lobs[i];														// Point at  lob
			if (!app.doc.FindLobById(o.parent))	{									// If no parent
				$("#floatsBut").append("<option value='"+o.id+"'>"+o.id+" - "+o.name+"</option>");	// Add to pulldown
				app.floats.push(o.id);												// Add to floats
				}
			}
		$("#showHelp").on("click",function() { 										// ON HELP
			window.open("https://docs.google.com/document/d/1QC4T1dE7xtjCM9C43AyUNiSPl-gKxjj4xziqm4JLd4I/edit?usp=sharing","_blank");
			});
		
		$("#undoBut").on("click", ()=> {  											// ON UNDO
			app.UnDo();																// Undo action
			});

		$("#settingsBut").on("click", ()=> {  										// ON SETTINGS
			app.con.Draw("setting");												// Run settings
			});

		$("#saveCourseBut").on("click", ()=> {  									// ON SAVE COURSE
			str=app.doc.MakeTabFile();												// Create TSV file
			$("#outputDiv").val(str);												// Show it
			$("#outputDiv")[0].select();											// Select div
			try {
				if (document.execCommand('copy')) {									// Copy to clipboard
					Sound("ding");													// Ding
					PopUp("Course<br>spreadsheet<br>copied to clipboard");			// Show popup
					}
				} catch (err) { console.log("Clipboard copy error")}				// Show error
			});

		$("#previewBut").on("click", ()=> {  										// ON PREVIEW COURSE
			str=app.doc.MakeTabFile();												// Create TSV file
			$("#outputDiv").val(str);												// Show it
			$("#outputDiv")[0].select();											// Select div
			if (app.previewWin && app.previewWin.closed)							// No longer open
				app.previewWin=false;												// Force a reopen
			if (!app.previewWin)													// No window open
				app.previewWin=window.open("index.html?preview","scalePreview");	// Open preview tab
			app.previewWin.postMessage("ScalePreview|"+str,"*");					// Send message						
			app.previewWin.focus();													// Show it
			Sound("ding"); 															// Ding
			});

		$("#asksBut").on("change", function() {  									// ON EDIT ASK
			app.con.Draw("ask",$(this)[0].selectedIndex-1);							// Show pane
			Sound("click"); 														// Click
			});

		$("#addPaneBut").on("click", ()=> {  										// ON ADD NEW PANE
			app.doc.AddNewLob(app.tree.curPaneId); 									// Add lob
			var id=app.doc.lobs[app.doc.lobs.length-1].id;							// New id
			app.tree.Init(id);														// Remake tree
			app.con.Draw("pane",id);												// Edit new pane
			Sound("ding"); 															// Ding
			});

		$("#floatsBut").on("change", function() {  									// ON EDIT FLOATING PANE
			o=app.doc.FindLobById($(this).val());									// Point at float lob
			if (o)	app.con.Draw("pane",o.id);										// Show float pane if valid
			Sound("click"); 														// Click
			});

		$("#addFloatBut").on("click", ()=> {  										// ON ADD NEW FLOATING PANE
			app.doc.AddNewLob("-");			 										// Add lob
			var id=app.doc.lobs[app.doc.lobs.length-1].id;							// Get id
			app.floats.push(id);													// Add to floats
			$("#floatsBut").append("<option value='"+id+"'>"+id+" - Rename this</option>");	// Add to pulldown
			$("#floatsBut")[0].selectedIndex=app.floats.length+1;					// Select it
			app.con.Draw("pane",id);												// Edit new float
			Sound("ding"); 															// Ding
			});

		$("#addAskBut").on("click", ()=> { 											// ON ADD QUESTION
			var o={id:"000", name:"Change this!", step:"{\"optionType\":\"radio\",\"options\":[]}"};	// Step
			app.doc.asks.push(o);													// Add to asks
			$("#asksBut").append("<option>000 - Change this!</option>");			// Add option
			$("#asksBut")[0].selectedIndex=app.doc.asks.length-1;					// Select it
			app.con.Draw("ask",app.doc.asks.length-1);								// Show editor																							
			Sound("ding");															// Ding sound
			});

		$("#rulesBut").on("change", function() {  									// ON EDIT ASK
			app.con.Draw("rule",$(this)[0].selectedIndex-1);						// Show pane
			Sound("click"); 														// Click
			});
		
		$("#addRuleBut").on("click", ()=> { 										// ON ADD RULE
			var o={id:"000", name:"Change this!", verb:"=", do:"show"};				// Rule
			$("#rulesBut").append("<option>000 - Change this!</option>");			// Add option
			app.rul.rules.push(o);													// Add to rules
			$("#rulesBut")[0].selectedIndex=app.rul.rules.length;					// Select it
			app.con.Draw("rule",app.rul.rules.length-1);							// Show editor																							
			Sound("ding");															// Ding sound
			});
	}	

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CONTENT
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	class Content {

		constructor()  																	// CONSTRUCTOR
		{
			this.curEditId=0;																// Id of current pane
			this.Draw("splash");															// Draw content

			$("#savePaneBut").on("click", ()=> {											// ON SAVE CHANGES
				app.editorChange=0;															// Changes saved
				var o=app.doc.lobs[this.curEditId];											// Point at lob
				o.body=CKEDITOR.instances.editor1.getData();								// Get body
				o.name=$("#pageTitle").text();												// Get name
				var id=$("#paneId").val();													// Get current id value
				if (id != o.id) {															// Reset
					app.doc.RenameLobId(o.id,id);											// Rename lob id
					app.tree.Init(id);														// Remake tree
					}
				else																		// Same id
					$("#tr-"+o.id).text(o.name)                             				// Reset tree name
				if (!app.doc.FindLobById(o.parent)) {										// A floating lob
					$('#floatsBut').find(":selected").text(o.id+" - "+o.name);				// Rename pulldown			
					$('#floatsBut').find(":selected").val(o.id);							// Rename pulldown value		
					$("#floatsBut")[0].selectedIndex=0;										// Clear selection
				}
				app.Do();																	// Save for undo
				$("#courseTitle").html(app.doc.lobs[0].name);								// Show course name
				this.Draw("splash");														// Draw splash
				Sound("ding");																// Ding
				});

			$("#removePaneBut").on("click", ()=> {  										// ON REMOVE PANE
				ConfirmBox("Are you sure?", "This will remove any underlying panes!",()=> { // If sure
					if ($("#floatsBut")[0].selectedIndex) {									// A floating lob
						app.doc.lobs.splice(this.curEditId,1);								// Remove lob
						app.floats.splice($("#floatsBut")[0].selectedIndex,1);				// Remove from array
						$('#floatsBut').find(":selected").remove();							// Remove from pulldown			
						$("#floatsBut")[0].selectedIndex=0;									// Clear selection
						}
					app.doc.UnlinkLob(app.tree.curPaneId) 									// Remove it
					app.tree.Init();														// Remake tree
					this.Draw("splash");													// Draw splash
					app.Do();																// Save for undo
					Sound("delete");														// Delete sound
					});
			});

		}

		Draw(type, id)																	// DRAW
		{
			var o;
			var str="";
			if (app.editorChange > 1) {														// If changes still active
				ConfirmBox("You have unsaved edits!","To save them, click on this <i><b>Cancel</b></i> button and then save them before exiting the editor.",	// Sure?
						()=>{ 	app.editorChange=0;											// Forget changes
								this.Draw(type,id);											// Do it anyway
							
						});
				return;																		// Quit (let confirm retry if OK)
				}	
				$("#editorDiv").hide();														// Hide editor
			if (type == "splash") {															// Draw splash
				str+="<div style='text-align:center;color:#000'><br><br><br><br><br>";
				str+="<img src='img/scalelogo.png'><br>";
				str+="<h1 style='font-size:24pt;font-family:trebuchet ms,sans-serif'><p></p>S C A L E</h1>";
				$("#contentDiv").html(str);													// Add splash
				}
			else if (type == "pane") {														// Draw pane
				id=app.doc.FindLobIndexById(id);											// Get index from id
				o=app.doc.lobs[id];															// Point at lob
				if (!o) { 																	// Invalid pane
					this.Draw("splash");													// Show splash																								
					return;																	// Quit
					}
				str+=o.name ? "<div id='pageTitle' class='wm-pageTitle' contentEditable='true'> "+o.name+"</div>" : "";			// Get page title
				$("#contentDiv").html(str);													// Add page title
				CKEDITOR.instances.editor1.setData(o.body);									// Add body data
				app.editorChange=0;															// Reset change flag
				this.curEditId=id;															// Save id
				$("#paneId").val(o.id);														// Show  id
				$("#editorDiv").show();														// Show editor
				}
			else if (type == "ask") {														// Draw question
				o=app.doc.asks[id];															// Point at ask
				if (!o) { 																	// Invalid pane
					this.Draw("splash");													// Show splash																								
					return;																	// Quit
					}
				this.curEditId=id;															// Save id
				this.QuestionEditor(o);														// Run editor
				}
			else if (type == "rule") {														// Draw rule
				o=app.rul.rules[id];														// Point at rule
				if (!o) { 																	// Invalid pane
					this.Draw("splash");													// Show splash																								
					return;																	// Quit
					}
				this.curEditId=id;															// Save id
				this.RuleEditor(o);															// Run editor
				}
			else if (type == "setting") 													// Draw settings
				this.SettingsEditor();														// Run editor
		}
	
	RuleEditor(r)																		// RULE EDITOR
	{
		var str="<div class='wm-stepEditor'>";
		str+="<table>";
		str+="<tr><td><img src='img/scalelogo.png' style='vertical-align:-20px' width='32'></td><td><span style='font-size:30px'><b>Rule Editor</b></span><br><b</td></tr>";	
		str+="<tr><td colspan='2'><br></td></tr>";	
		str+="<tr><td><b>IF</b></td><td><input class='wm-is' type='text' id='ruleSub' value='"+(r.subject ? r.subject :'')+"'></td></tr>";	
		str+="<tr><td><b>IS</b></td><td>"+MakeSelect("ruleVerb",false,["Equal","Not equal","Similar","Less than","Less than or equal","Greater than","Greater than or equal","RegEx"],r.verb,"",["EQ","NE","LK","LT","LE","GT","GE","RE"])+"</td></tr>";	
		str+="<tr><td><b>TO</b></td><td><input class='wm-is' type='text' id='ruleTrig' value='"+(r.trigger ? r.trigger :'')+"'></td></tr>";	
		str+="<tr><td><b>THEN&nbsp;</b></td><td>"+MakeSelect("ruleDo",false,["Show pane","Set status","Set var name"],r.do,"",["SHOW","STATUS","VAR"])+"</td></tr>";	
		str+="<tr><td><b>OF</b></td><td><input class='wm-is' type='text' id='ruleObj' value='"+(r.object ? r.object :'')+"'></td></tr>";	
		str+="<tr><td colspan='2'><br></td></tr>";	
		str+="<tr><td><b>Name</b></td><td><input class='wm-is' type='text' id='ruleName' value='"+(r.name ? r.name :'')+"'></td></tr>";	
		str+="<tr><td><b>Id</b></td><td><input class='wm-is' type='text' id='ruleId' value='"+(r.id ? r.id :'')+"'></td></tr>";	
		str+="</table>";																			
		str+="</div><div style='margin-left:48px;margin-top:-15px'>";																		
		str+="<div id='saveRuleBut' class='wm-bs'>Save changes</div>&nbsp;&nbsp;";						
		str+="<img id='removeRuleBut' title='Delete this rule' style='vertical-align:-5px' src='img/trashbut.gif'></div>";	// Trash button
		$("#contentDiv").html(str);	

		$("#saveRuleBut").on("click", ()=> { 											// ON SAVE RULE
			var o={};
			o.subject=$("#ruleSub").val();	o.object=$("#ruleObj").val();					// Get vals						
			o.verb=$("#ruleVerb").val();	o.trigger=$("#ruleTrig").val();					
			o.do=$("#ruleDo").val();		o.name=$("#ruleName").val();		
			o.id=$("#ruleId").val();	
			$('#rulesBut').find(":selected").text(o.id+" - "+o.name);						// Rename pulldown			
			app.rul.rules[$("#rulesBut")[0].selectedIndex-1]=o;								// Set new rule
			$("#rulesBut")[0].selectedIndex=0;												// Clear selection
			this.Draw("splash");															// Show splash																								
			app.Do();																		// Save for undo
			Sound("ding");																	// Ding sound
			});
		
		$("#removeRuleBut").on("click", ()=> { 												// ON REMOVE RULE
			ConfirmBox("Are you sure?","This will remove this rule from your course.", ()=> {	// If sure
				app.rul.rules.splice($('#rulesBut')[0].selectedIndex-1,1);					// Remove from rules
				$('#rulesBut').find(":selected").remove();									// Remove from pulldown			
				$("#rulesBut")[0].selectedIndex=0;											// Clear selection
				this.Draw("splash");														// Show splash																								
				app.Do();																	// Save for undo
				Sound("delete");															// Delete sound
				});
			});
	}
	
	
	SettingsEditor()																	// SETTINGS EDITOR
	{
		var str="<div class='wm-stepEditor'>";
		str+="<img src='img/scalelogo.png' style='vertical-align:-6px' width='32'><span style='font-size:30px;margin-left:16px'><b>Settings</b></span><br><br>";	
		str+="<table>";
		str+="<tr><td>Mark done if visited</td><td><input type='checkbox' "+(app.setDone ? "checked" : "")+" id='setDone'></td></tr>";	
		str+="<tr><td>Skip done if visited</td><td><input  type='checkbox' "+(app.skipDone ? "checked" : "")+" id='setSkip'></td></tr>";	
		str+="<tr><td>Hide header</td><td><input  type='checkbox' "+(app.hideHeader ? "checked" : "")+" id='setHeader'></td></tr>";	
		str+="<tr><td>Default margin %</td><td><input class='wm-is' type='text' id='setMargin' value='"+(app.defMargin ? app.defMargin : 0)+"'></td></tr>";	
		str+="<tr><td>Discussion name|id;</td><td><input class='wm-is' type='text' id='setDisqus' value='"+(app.disqus ? app.disqus : '')+"'></td></tr>";	
		str+="<tr><td colspan='2'><hr></td></tr>";	
		str+="<tr><td>Assessment pass level&nbsp;</td><td><input class='wm-is' type='text' id='setPass' value='"+(app.assessLevel ? app.assessLevel : '')+"'></td></tr>";	
		str+="<tr><td>User name prefix&nbsp;</td><td><input class='wm-is' type='text' id='setName' value='"+(app.namePrefix ? app.namePrefix : '')+"'></td></tr>";	
		str+="<tr><td>Ask to login</td><td><input type='checkbox' "+(app.login ? "checked" : "")+" id='setLogin'></td></tr>";	
		str+="<tr><td>Reporting level&nbsp;</td><td><input class='wm-is' type='text' id='setLevel' value='"+(app.reportLevel ? app.reportLevel : '')+"'></td></tr>";	
		str+="<tr><td>Reporting link&nbsp;</td><td><input class='wm-is' type='text' id='setLink' value='"+(app.reportLink ? app.reportLink : '')+"'></td></tr>";	
		str+="<tr><td colspan='2'><hr></td></tr>";	
		str+="<tr><td>Delete entire course</td><td><div id='deleteCourseBut' class='wm-bs'>Delete</div></td></tr>";	
		str+="</table>";																			
		str+="</div><div style='margin-left:48px;margin-top:-15px'>";																		
		str+="<div id='saveSetBut' class='wm-bs'>Save changes</div>&nbsp;&nbsp;";						
		$("#contentDiv").html(str);	

		$("#deleteCourseBut").on("click", ()=> { 											// ON DELETE COURSE		
			ConfirmBox("Are you sure?","This will remove the entire course!", ()=> {		// If sure
				app.InitCourse();															// Init	
				app.doc.AddNewLob("", 1, "Course name");									// Add course				
				app.Draw();
			});
		});

		$("#saveSetBut").on("click", ()=> { 												// ON SAVE SETTINGS
			app.setDone=$("#setDone").prop("checked");										// Get vals			
			app.skipDone=$("#setSkip").prop("checked");								
			app.reportLevel=$("#setLevel").val();	
			app.login=$("#setLogin").prop("checked");								
			app.namePrefix=$("#setName").val();	
			app.reportLink=$("#setLink").val();	
			app.hideHeader=$("#setHeader").prop("checked");								
			app.defMargin=$("#setMargin").val();	
			app.disqus=$("#setDisqus").val();	
			this.Draw("splash");															// Show splash																								
			app.Do();																		// Save for undo
			Sound("ding");																	// Ding sound
			});
		}

	QuestionEditor(ask) 																	// ASK STEP EDITOR
	{
		var i;
		var o=$.parseJSON(ask.step);													// Convert to obj
		var _this=this;																	// Save context		
		var str="<div class='wm-stepEditor'><table style='font-size:12px'>";
		str+="<tr><td><img src='img/scalelogo.png' width='32'></td><td><span style='font-size:30px'><b>Question Editor</b></span><br><br><b</td></tr>";	
		str+="<tr><td><b>Question name</b></td><td><input class='wm-is' type='text' id='askName' value='"+(ask.name ? ask.name :'')+"'></td></tr>";	// Get setting
		str+="<tr><td><b>Type</b></td><td>"+MakeSelect("optionType",false,["radio","checkbox","cloze","slider","write","match","sort"],o.optionType)+"</td></tr>";	// Get setting
		str+="<tr><td><b>Title</b></td><td><input class='wm-is' type='text' id='title' value='"+(o.title ? o.title :'')+"'></td></tr>";	// Get setting
		str+="<tr><td><b>Text</b></td><td><textarea class='wm-is' id='text'>"+(o.text ? o.text :'')+"</textarea></td></tr>";	// Get setting
		str+="<tr><td><b>Prompt</b></td><td><textarea class='wm-is' id='prompt'>"+(o.prompt ? o.prompt :'')+"</textarea></td></tr>";	// Get setting
		str+="<tr><td><b>Image</b></td><td><input class='wm-is' type='text' id='pic' value='"+(o.pic ? o.pic :'')+"'></td></tr>";	// Get setting
		str+="<tr><td><b>If right answer</b></td><td><textarea class='wm-is' id='whyRight'>"+(o.whyRight ? o.whyRight :'')+"</textarea></td></tr>";	// Get setting
		str+="<tr><td><b>If wrong answer</b></td><td><textarea class='wm-is' id='whyWrong'>"+(o.whyWrong ? o.whyWrong :'')+"</textarea></td></tr>";	// Get setting
		str+="<tr><td><b>If partial answer</b>&nbsp;</td><td><textarea class='wm-is' id='whyPartial'>"+(o.whyPartial ? o.whyPartial :'')+"</textarea></td></tr>";	// Get setting
		str+="<tr><td><b>Number of tries</b></td><td><input class='wm-is' type='text' id='numTries' value='"+(o.numTries ? o.numTries :'')+"'></td></tr>";	// Get setting
		str+="<tr><td><b>Allow skipping</b></td><td>"+MakeSelect("skip",false,["true","false"],o.skip)+"</td></tr>";	// Get setting
		str+="<tr><td><b>Font size</b></td><td><input class='wm-is' type='text' id='fontSize' value='"+(o.fontSize ? o.fontSize :'Default (12)')+"'></td></tr>";	// Get setting
		str+="<tr><td><b>Id</b></td><td><input class='wm-is' type='text' id='askId' value='"+(ask.id ? ask.id :'')+"'></td></tr>";	// Get setting
		str+="<tr><td colspan=2><p><hr></p></td></tr>";
		str+="<tr><td><b>Options</b></td><td><dl id='optionsTable'>";
		if (o.options) {
			str+="";
			for (i=0;i<o.options.length;++i) {
				str+="<dt id='ido"+i+"'style='height:28px'><input class='wm-is' type='text' id='idr"+i+"' value='"+(o.options[i] ? o.options[i] :'')+"'>"; 	// Add option
				str+="&nbsp;&nbsp;&nbsp;&nbsp;&uarr;&darr;&nbsp";																			// Add arrows
				str+="&nbsp;&nbsp;&nbsp;<img id='idd"+i+"' style='vertical-align:middle;cursor:pointer' src='img/trashbut.gif'</dt>"
				}
			}		
		str+="</dl></td></tr></table>";																			
		str+="<div style='text-align:center'><div id='addNewOptionBut' class='wm-bs'>Add new option</div></div>";	
		str+="</div><div style='margin-left:48px;margin-top:-15px'>";																		
		str+="<div id='saveStepBut' class='wm-bs'>Save changes</div>&nbsp;&nbsp;";						
		str+="<img id='removeStepBut' title='Delete this question' style='vertical-align:-5px' src='img/trashbut.gif'></div>";	// Trash button
		$("#contentDiv").html(str);	
		$("#optionsTable").sortable();
	
		$("#optionsTable").on("sortstop", function(e, ui) {									// If sorted
			var v=$("#optionsTable").sortable("toArray");									// Get new order
			for (i=0;i<v.length-1;++i)														// For each option, less add but
 				o.options[i]=$("#idr"+v[i].substr(3)).val();								// Reorder array
			});
		
		 if (o.options)																		// If options set
			for (i=0;i<o.options.length;++i) {												// For each option
				 $("#idd"+i).on("click", function() { 										// Extract value	
					var id=$(this)[0].id.substr(3);											// Extract id
					o.options.splice(id,1);													// Remove from list
					$("#ido"+id).remove();													// Remove option from menu
					Sound("delete");														// Delete sound
					});
				}
	
		$("#addNewOptionBut").on("click", function() { 										// ON ADD NEW OPTION	
			if (!o.options)	o.options=[];													// First one, so alloc array
			o.options.push("");																// Add new option
			var i=o.options.length-1;														// Index	
			var str="<dt id='ido"+i+"'style='height:28px'><input class='wm-is' type='text' id='idr"+i+"' value=''>"; 	
			str+="&nbsp;&nbsp;&nbsp;&nbsp;&uarr;&darr;&nbsp";														
			str+="&nbsp;&nbsp;&nbsp;<img id='idd"+i+"' style='vertical-align:middle;cursor:pointer' src='img/trashbut.gif'</dt>";
			$("#optionsTable").append(str);													// Add line to table
			Sound("click");																	// Delete sound
			
			$("#idd"+i).on("click", function() { 											// ADD TRASH HANDLER	
					var id=$(this)[0].id.substr(3);											// Extract id
					o.options.splice(id,1);													// Remove from step
					$("#ido"+id).remove();													// Remove option from menu
					Sound("delete");														// Delete sound
					});
			});

		$("#saveStepBut").on("click", function() { 											// ON SAVE STEP
				var i;
				o.optionType=$("#optionType").val();	o.title=$("#title").val();			// Get values from inputs						
				o.text=$("#text").val();				o.prompt=$("#text").val();									
				o.pic=$("#pic").val();					o.whyRight=$("#whyRight").val();								
				o.whyWrong=$("#whyWrong").val();		o.whyPartial=$("#whyPartial").val();	
				o.fontSize=$("#fontSize").val();		o.numTries=$("#numTries").val();	
				o.skip=$("#skip").val();				ask.name=$("#askName").val();
				ask.id=$("#askId").val();
				var v=$("#optionsTable").sortable("toArray");								// Get new order
				for (i=0;i<v.length;++i) {													// For each option		
					v[i]="idr"+v[i].substr(3);												// Replace sort id with input id
					o.options[i]=$("#"+v[i]).val();											// Get option value
					}
				ask.step=JSON.stringify(o);													// Copy at JSON string
				$('#asksBut').find(":selected").text(ask.id+" - "+ask.name);				// Rename pulldown			
				$("#asksBut")[0].selectedIndex=0;											// Clear selection
				app.Do();																	// Save for undo
				_this.Draw("splash");														// Show splash																								
				Sound("ding");																// Ding sound
				});
		
		$("#removeStepBut").on("click", function() { 										// ON REMOVE STEP
				ConfirmBox("Are you sure?","This will remove this question from your course.", ()=> {	// If sure
				app.doc.asks.splice($('#asksBut')[0].selectedIndex-1,1);					// Remove from rules
				$('#asksBut').find(":selected").remove();									// Remove from pulldown			
				$("#asksBut")[0].selectedIndex=0;											// Clear selection
				_this.Draw("splash");														// Show splash																								
				app.Do();																	// Save for undo
				Sound("delete");															// Delete sound
				});
			});
		}																					// EditStep() closure
	}																						// Class closure

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TREE  
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	class Tree {

		constructor()  																	// CONSTRUCTOR
		{
			this.Init();																	// Init tree
		}

		Init(id) 																			// INIT TREE
		{
			var _this=this;																	// Save context		
			var o=app.doc.lobs[0];															// Point at root												
			if (!o)	return;																	// If invalid, quit
			var str="<ul><li class='parent active'><a id='tr-"+o.id+"'>"+o.name+"</a></li>"; // Add root tree node
			$("#treeDiv").html(str+"</ul>");												// Add to tree div
			this.AddChildren($("#tr-"+o.id),0);												// Add children to tree
			$("#tr-"+o.id).parent().children('ul').slideToggle('fast');            			// Open course
			$("[id^=tr-]").draggable( {	revert:true });										// Make lines draggable to change parent
			$("[id^=tr-]").droppable( {														// Make lines droppable to change parent
				drop: function(e,ui) {														// On drop
					var mode=e.shiftKey ? "shift" : "move";									// Move or shift
					app.doc.ChangeOrder(ui.draggable[0].id.substr(3),e.target.id.substr(3),mode); // Rearrange
					_this.Init(ui.draggable[0].id.substr(3));								// Re-init tree	
					app.Do();																// Save for undo
					Sound("ding");															// Ding
					}
			});

			if (id != undefined) this.Open(id);	

			$('.wm-tree li > a').on("click", function(e) {									// ON CLICK OF NODE TEXT
				_this.handleTreeClick($(this),e);  											// Handle
				Sound("click"); 															// Click
				});      
		}

		Open(id)																		// OPEN TREE AT ID
		{
			var i;
			var row=$("#tr-"+id);															// Trace row
			var par=row.parent();															// Point at previous line
			$('.wm-tree li a').each( function() {                          					// For each line
				$(this).css({"color":"#000","font-weight":"normal"});      					// Normal
				}); 
			row.css({"color":"#009900","font-weight":"bold"});          					// Bold and green   
			for (i=0;i<20;++i) {															// Iterate upwards
				if ($(par).attr("class") == "wm-tree")	break;								// Quit at top of tree
				if ($(par).attr("class") == "parent") {										// Has children
					par.addClass('active');                         						// Active class on 
					par.children('ul').slideToggle('fast');            						// Slide into place
					}
				par=par.parent();															// Up a level
				}
		}

	handleTreeClick(row, e)																// HANDLE TREE CLICK
	{
		if (e.offsetX < 12) {                                         				  		// In icon
			row.parent().toggleClass('active');                         					// Toggle active class on or off
			row.parent().children('ul').slideToggle('fast');            					// Slide into place
			}
		else{																				// In text
			$('.wm-tree li a').each( function() {                          					// For each line
				$(this).css({"color":"#000","font-weight":"normal"});      					// Normal
				}); 
			row.css({"color":"#009900","font-weight":"bold"});          					// Bold and green   
			this.curRow=row;																// Save row
			this.curPaneId=e.target.id.substr(3);											// Save pane id
			app.con.Draw("pane",this.curPaneId);											// Show pane
			}
		}

	AddChildren(row, id) 																// ADD CHILDREN TO TREE RECURSIVELY
	{
		var i,o,oo;
		if (id < 0)	return;																	// Invalid index
		var o=app.doc.lobs[id];																// Point at parent												
		if (!o)	return;																		// If invalid, quit
		if (!o.children)	return;															// Quit if no children
		var str="<ul style='display:none'>";												// Wrapper
		for (i=0;i<o.children.length;++i) {													// For each child
			str+="<li";																		// Start row
			oo=app.doc.lobs[o.kids[i]];														// Point at child lob via index
			if (oo.children.length)	str+=" class='parent'"									// Add parent if it has children
			str+="><a id='tr-"+oo.id+"'>"+oo.name;											// Add index and name
			str+"</a></li>";																// Add label
			}
		row.after(str+"</ul>");																// Add to tree
		for (i=0;i<o.children.length;++i) {													// For each child
			row=$("#tr-"+o.children[i])
			this.AddChildren(row,o.kids[i]);												// Recurse
			}
		}
}																						// Class closure


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// GOOGLE
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

function GoogleDriveLoad(allFiles, callback)											// GOOGLE IMPORTER
{
	var _this=this;																			// Save context
 	
	LoadGoogleDrive(true, function(s) {
		if (callback) callback(s.url);
		});
	
 	function LoadGoogleDrive(allFiles, callback)										// LOAD PICKER FOR GOOGLE DRIVE
	{
	  	var pickerApiLoaded=false;
		var oauthToken;
		var key="AIzaSyCYHoa3mQ56qcp0E6gDHXdDhU1rsvtsNCI";
		var id="802670590549-r0sj486pl33jo2pfbod6jkt3hjslt1iq.apps.googleusercontent.com";
			gapi.load('auth', { 'callback': function() {
				window.gapi.auth.authorize( {
	              	'client_id': id,
	             	'scope': ['https://www.googleapis.com/auth/drive'],
	              	'immediate': false }, function(authResult) {
							if (authResult && !authResult.error) {
	          					oauthToken=authResult.access_token;
	          					createPicker();
	          					}
	          				});
				}
			});
		
		gapi.load('picker', {'callback': function() {
				pickerApiLoaded=true;
		        createPicker();
	    	   	}
			});
	
		function createPicker() {
	        if (pickerApiLoaded && oauthToken) {
	//         	var upview=new google.picker.DocsUploadView();
	           	var view=new google.picker.DocsView().
	           		setOwnedByMe(allFiles).
					setIncludeFolders(true);
	          	var picker=new google.picker.PickerBuilder().
	          		addView(view).
	//         		addView(upview).
					setOAuthToken(oauthToken).
					setDeveloperKey(key).
					setCallback(pickerCallback).
					build();
				picker.setVisible(true);
	       		}
	    	}
	
		function pickerCallback(data) {
	        if (data[google.picker.Response.ACTION] == google.picker.Action.PICKED) {
         		var doc=data[google.picker.Response.DOCUMENTS][0];
				if (callback)	 callback(doc)
	       		}
			}
	   
	}	// End closure
}



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// HELPERS
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	function ConfirmBox(title, content, callback, callback2)							// CONFIRMATION BOX
	{
		Sound("ding");																		// Ding sound
		$("#confirmBoxDiv").remove();														// Remove 
		$("body").append("<div class='wm-confirm' id='confirmBoxDiv'></div>");														
		var str="<img src='img/scalelogo.png' width='32' style='vertical-align:-10px'/>&nbsp;&nbsp;";								
		str+="<span style='font-size:18px; color:#666'><b>"+title+"</b></span><br>";
		str+="<p>"+content+"<p>";
		str+="<div style='float:right'><div id='confirmOK' class='wm-bs'>OK</div>";
		str+="<div id='confirmCancel' class='wm-bs' style='margin-left:8px;background-color:#999'>Cancel</div></div>";
		$("#confirmBoxDiv").html(str);	
	
		$("#confirmOK").on("click", function() {											// ON OK BUT
				$("#confirmBoxDiv").remove();												// Remove 
				if (callback)	callback();													// If callback defined, run it
				});

		$("#confirmCancel").on("click", function() {										// ON CANCEL BUT
				$("#confirmBoxDiv").remove();												// Remove 
				if (callback2)	callback();													// If callback defined, run it
				Sound("delete");															// Delete sound
				});
	}

	function MakeSelect(id, multi, items, sel, extra, values)				// CREATE HTML SELECT
	{
		var	str="<select class='wm-is' style='width:200px' id='"+id+"'";		// Header
		if (multi)																// Multi select
			str+="multiple='multiple' size='"+multi+"'";						// Add flag
		if (extra)																// If extra param
			str+=extra;															// Add them
		str+=">";																// End header
		for (i=0;i<items.length;++i) {											// For each option
			str+="<option";														// Add tag
			if (values && values[i]) {											// If has a value
				str+=" value='"+values[i]+"'";									// Add it
				if (sel == values[i])	str+=" selected='selected'"				// If value selected, add tag
				}
			else if (sel == items[i])	str+=" selected='selected'"				// If name selected, add tag
			str+=">"+items[i]+"</option>";										// End option
			}	
		return str+"</select>";													// End select				
}

	function trace(msg, p1, p2, p3, p4)										// CONSOLE 
	{
		if (p4 != undefined)
			console.log(msg,p1,p2,p3,p4);
		else if (p3 != undefined)
			console.log(msg,p1,p2,p3);
		else if (p2 != undefined)
			console.log(msg,p1,p2);
		else if (p1 != undefined)
			console.log(msg,p1);
		else
			console.log(msg);
	}

	function CopyToClipboard(text) 											// COPY TEXT TO CLIP BOARD
	{
  		var textArea = document.createElement("textarea");
		textArea.style.position = 'fixed';
  		textArea.style.top=textArea.style.left = 0;
  		textArea.style.width=textArea.style.height = '2em';
  		textArea.style.padding = 0;
		textArea.style.border=textArea.style.outline=textArea.style.boxShadow = 'none';
		textArea.style.background = 'transparent';
		textArea.value = text;
		document.body.appendChild(textArea);
		textArea.select();
		try {
			if (document.execCommand('copy'))
				Sound("ding");
			else
				Sound("delete");
			} catch (err) {
				Sound("delete");
				}
		document.body.removeChild(textArea);
	}

	function Sound(sound, mute)												// PLAY SOUND
	{
		var snd=new Audio();													// Init audio object
		if (!snd.canPlayType("audio/mpeg") || (snd.canPlayType("audio/mpeg") == "maybe")) 
			snd=new Audio("img/"+sound+".ogg");									// Use ogg
		else	
			snd=new Audio("img/"+sound+".mp3");									// Use mp3
		if (!mute)																// If not initing or muting	
			snd.play();															// Play sound
	}
	
	function PopUp(msg, time, div)											// TIMED POPUP
	{
		var str="";
		$("#popupDiv").remove();												// Kill old one, if any
		str+="<div id='popupDiv' class='wm-popup'>"; 							// Add div
		if (time == -1) {														// If has close but
			time=100000;														// Increase time
			str+="<img id='pu-close' src='img/closedot.gif' style='float:right;cursor:pointer'>";	// Add close button
			}
		str+=msg+"</div>"; 														// Add div
		$(div ? "#"+div : "body").append(str);									// Add popup to div or body
		$("#pu-close").click(function() { $("#popupDiv").remove(); });			// Remove on click of close but
		$("#popupDiv").fadeIn(500).delay(time ? time : 2000).fadeOut(500)		// Animate in and out		
	}

</script>

<!-- Global site tag (gtag.js) - Google Analytics -->
<script async src="https://www.googletagmanager.com/gtag/js?id=UA-1013215-2"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());
  gtag('config', 'UA-1013215-2');
</script>

</body></html>
