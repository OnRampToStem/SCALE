<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8" />
  	<title>SCALE Video</title>
	<link REL="SHORTCUT ICON" HREF="img/favicon.ico">
	<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
	<link   rel="stylesheet" href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/themes/smoothness/jquery-ui.css">
	<script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
	<script src="lib/jquery.ui.touch-punch.min.js"></script>
	<style>
		body { 	font-family:Verdana,Geneva,sans-serif; font-size:13px;padding:0px;margin:0px }
	</style>
</head>
<body>
	<div id="showDiv">
		<div id="playerDiv" style="width:100%;height:100%;display:none;overflow:hidden; user-select: none"></div>
		<div id="slideDiv" style="position:absolute;overflow:hidden;user-select:none"></div>
	</div>
	<div id="playerSiz" style="position:absolute;width:8px;cursor:col-resize;user-select:none"  title="Resize player">
		<div id="playerSiz1" style="position:absolute;width:40px;height:100%;left:-16px;user-select:none"></div>
	</div>

<script>

//youtu.be/2doZROwdte4
//www.kaltura.com/p/2003471/sp/0/playManifest/entryId/1_c7z7zuiv/format/url/flavorParamId/2003471.mp4
//vimeo.com/274326838
//localhost/video.htm?src=IRVdiHu1VCc\|slides=https://docs.google.com/presentation/d/e/2PACX-1vQMmAXYMlLmBVH3n9hx4_U0OPYSdJwfR-JrI87p5D0ZldfWC9Y0Yxemkh4tYnuh2igiC03gNGHDjGnS/embed|trigger=5-2+10-3+15-2+20-1

	var playerSource="";
	var playerAuto="false";
	var playerNext="false";
	var playerStart=0;
	var playerEnd=0;
	var playerVolume=50;
	var playerSpeed=1;
	var playerAspect=.5625;
	var playerControls="true";
	var player=null;															// Holds player object
	var playerNow=0;															// Current time in secs
	var playerTime=null;														// Timer
	var playerMode="empty";														// State of player
	var	playerCurTime=0;														// Current time
	var	playerTRT=0;															// Total running time
	var playerHgt,playerWid;													// Source height/width
	var isMobile=false;															// Flag for mobile devices
	var playerTime=null;														// Timer
	var triggers=[];															// Time triggers to do something												
	var slideSource="";															// Id of slide presentation
	var playerSlideRatio=1;														// Player slider ratio
	var paneAnimationTimer=null;												// Animating panes

	var v=window.location.search.substring(1).split("|");						// Get query string
	for (i=0;i<v.length;++i) {													// For each param
		if (v[i].match(/src=/i))		playerSource=GetDirectLink(v[i].substr(4));  // Set src
		if (v[i].match(/start=/i))		playerStart=v[i].substr(6)-0;			// Set start
		if (v[i].match(/end=/i))		playerEnd=v[i].substr(4);				// Set end
		if (v[i].match(/auto=/i))		playerAuto=v[i].substr(5);				// Set auto
		if (v[i].match(/next=/i))		playerNext=v[i].substr(5);				// Set next
		if (v[i].match(/trigger=/i))	triggers=v[i].substr(8).split("+");		// Set triggers
		if (v[i].match(/slides=/i))		slideSource=v[i].substr(7);				// Set slides source
		if (v[i].match(/split=/i))		playerSlideRatio=v[i].substr(6)/100;	// Set start
		}
	for (var i=0;i<triggers.length;++i) 										// For each trigger
		triggers[i]=triggers[i].split("-");										// Split time-action

	$(document).ready(function() {												// When loaded
 		if (window.addEventListener) 											// If supported this way
			window.addEventListener("message",shivaEventHandler,false);			// Add event handler
		else																	// Use other method
			window.attachEvent("message",shivaEventHandler);					// Add handler		
		isMobile=navigator.userAgent.match(/(ipad|iphone|ipod|android)/i) ? true : false; // Set mobile flag
		$(window).resize(ResizePanes);                                     		// On window resizing
		playerTimer=setInterval(OnPlayerTimer,200);								// Set timer ~5ps
		if (slideSource) {														// If showing slides
			if (playerSlideRatio == 1)	playerSlideRatio=.5;					// Assume 50% if no split set
			$("#slideDiv").html("<iframe id='slideDivIF' frameborder='0' width='100%' src='"+slideSource+"'></iframe>");	// Load in iframe
			}
		else{																	// No slides
			$("#slideDiv").remove();											// Remove divs
			$("#playerSiz").remove();
			}
		Init();																	// Init player
		});


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// PANES
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		$("#playerSiz").draggable({												// DRAG PLAYER WIDTH HANDLER
			cursorAt:{left:16},	iframeFix:true,									// Cursor offset
			cursor: "col-resize", axis:"x",										// X-only
			start: function(event, ui) {										// On drag start
				$("#playerSiz1").css({ width:"500px", left:(offx-500)+"px" });	// Widen hiding div
				},
			drag: function(event, ui) {											// On drag
				var wid=$("body").width();										// Get screen size
				playerSlideRatio=Math.max(0,Math.min(1,(event.clientX-offx-8)/(wid+16)));	// Set ratio between windows
				if (Math.abs(playerSlideRatio-.5) < .01) 						// If close to center
					playerSlideRatio=.5;										// Snap it there
				ResizePanes();													// Resize panes
				},
			stop: function(event, ui) {											// On drag end
				$("#playerSiz1").css({ width:"40px", left:(offx-16)+"px" });	// Contract hiding div
				ResizePanes();													// Resize panes
				}
			});

		$("#playerSiz").hover(													// Player width
			function(){ $(this).css("background-color","#acc3db")},				// Highlight
			function(){ $(this).css("background-color","transparent")			// Hide
		});


	function ResizePanes()													// RESIZE PANES
	{ 
		var wid=$("body").width();												// Cap at screen size
		var w=wid*playerSlideRatio+4;											// Player width
		var w2=wid-w-8;															// Slide width
		if (w <= 0)				w=0,w2=wid;										// Full slide											
		else if (w2 <= 0)		w2=0,w=wid;										// Full video											
		var h=Math.max(((wid-4)*playerAspect)-(w*playerAspect),w*playerAspect);	// Player height
		$("#playerDiv").css({ width:w+"px",top:0 });							// Set player pos
		offx=$("#playerDiv").offset().left;										// Offset X from base
		$("#slideDiv").css({ left:(wid+offx-w2)+"px",width:w2+"px",top:0,height:h+"px"}); // Set slider pos/size
		$("#playerSiz").css({ left:(w+offx)+"px",height:h+"px",top:0});			// Set sizer pos
		RunPlayer("resize");													// Resize player
		$("#slideDivIF").height($("#slideDiv").height()-2);						// Set iframe height, if any
	}		

	function AnimatePanes(end, dur,)									// ANIMATE CHANGE OF PANE RATIO
	{
		var start=playerSlideRatio;												// Get current player ratio
		var dif=Math.abs(end-start);											// Difference
		if ((dif < .05) || (paneAnimationTimer)) {								// If close enough or animating alredy
			clearInterval(paneAnimationTimer);									// Kill timer
			paneAnimationTimer=null;											// Clear timer var
			playerSlideRatio=end;												// Set player ratio
			if (dif)															// If not there yet
				ResizePanes();													// Resize
			return;																// Quit
			}
		clearInterval(paneAnimationTimer);										// Kill timer
		paneAnimationTimer=null;												// Clear timer var
		var startTime=new Date().getTime();										// Set start
		if (dur == undefined)													// If no duration set
			dur=.5;																// Set default
		dur=dur*1000;															// Secs to ms
		if (playerMode != "play")												// If not playing
			dur=1;																// Go to end quickly
		paneAnimationTimer=setInterval(onAnimate,24);							// Set timer ~40ps

		function onAnimate() {
			var now=(new Date().getTime()-startTime)/dur;						// Get now
			now=1.0-((Math.cos(3.1414*Math.min(now,1))+1)/2.0);					// Full cosine curve
			var pos=start+(end-start)*now;										// Get val
			if (now > .99)	{													// If done
				clearInterval(paneAnimationTimer);								// Kill timer
				pos=end;														// Force to end
				paneAnimationTimer=null;										// Null it out
				}
			playerSlideRatio=pos;												// Set player ratio
			ResizePanes();														// Resize
			}
	}

	function OnPlayerTimer()												// GET TIME FROM PLAYER
	{
		if ((!player) || (playerMode != "play"))								// Not playing
			return;																// Quit
		if (playerType == "youtube") 											// If YouTube
			playerCurTime=player.getCurrentTime();								// Get curtime
		else if (playerType == "html5") 										// If HTML5
			playerCurTime=player.currentTime;									// Get cur time
		if (playerEnd && (playerCurTime >= playerEnd))	{						// Past end
			RunPlayer("pause");													// Pause
			SendScaleMessage("stop",playerEnd);									// Send stop
			if (playerNext == "true")	SendScaleMessage("next");				// Send next if set
			}
		else if (triggers) {													// If triggers defined
			var i,t;
			for (i=0;i<triggers.length;++i) {									// For each trigger
				if (Math.abs(playerCurTime-triggers[i][0]) < .15)	{			// Near trigger point
					if (slideSource) {											// Has slides
						$("#slideDivIF").prop("src",slideSource+"?slide="+triggers[i][1]);	// Next slide	
						}
					else{														// Straight video
						if (triggers[i][1].charAt(0) == '*')					// If not pausing video
							SendScaleMessage("trigger",triggers[i][1].substr(1)+"|"+(triggers[i][0]-0+.16));	// Send trigger back					
						else{
							RunPlayer("pause");									// Pause
							SendScaleMessage("trigger",triggers[i][1]+"|"+(triggers[i][0]-0+.16));	// Send trigger back					
							}
						triggers[i][0]=-10;										// Disable trigger from firing again
						}
					break;														// Quit
					}
				}
			}



//		else
//			SendScaleMessage("play",now.toFixed(3));							// Send time
	}

	function Init()
	{
		ResizePanes();															// Resize panes
		if (playerSource.match(/\/\//i)) {										// If HTML5
			if (player && (playerType == "html5")) {							// Player not active loaded
				if (player.currentSrc.indexOf(playerSource) == -1)	{			// Different clip
					var base=playerSource.match(/(.*)\.[^.]+$/i)[1];			// Extract base
					if (playerSource.match(/\.mp3/i)) 							// If audio
						player.src=base+".mp3";									// MP3 Source
					else														// VIDEO
						player.src=base+".mp4";									// MP4 Source
					player.load();												// Load it
					}
				}
			else{
				playerType="html5";												// Set type
				RunPlayer("init");												// Init player
				}
			}
		else if (!isNaN(playerSource)) {										// If Vimeo
			playerType="vimeo";													// Set type
			RunPlayer("init");													// Init player
			}
		else{																	// If YouTube
			playerType="youtube";												// Set type
			if (player) {														// Player active 
				if (!player.pauseVideo)	{										// If not YT player set
					if (YT.Player)												// If library is loaded
						RunPlayer("init");										// Re-init
					else{														// Load YT api
						var tag=document.createElement('script');				// Create script
						tag.src="//www.youtube.com/iframe_api";					// Set api url
						var firstScriptTag=document.getElementsByTagName('script')[0];	// Find 1st script
						firstScriptTag.parentNode.insertBefore(tag,firstScriptTag);		// Load
						}
					}
				
				else{															// Player is active
					if (player.getVideoUrl().indexOf(playerSource) == -1)		// Different clip
						player.loadVideoById(playerSource);						// Reload clip
					else
						player.seekTo(playerStart);								// Seek to start point
					if (playerAuto == "true")									// If autoplay
						player.playVideo();										// Play video
					}
				}
			else{																// API not loaded yet
				var tag=document.createElement('script');						// Create script
				tag.src="//www.youtube.com/iframe_api";							// Set api url
				var firstScriptTag=document.getElementsByTagName('script')[0];	// Find 1st script
				firstScriptTag.parentNode.insertBefore(tag,firstScriptTag);		// Load
				}
			}
		}


	function RunPlayer(what, param, param2)									// PLAYER ACTIONS
	{
		var i,str;
		if ((what == "play") || (what == "jump")) {								// Play/jump
			if ((playerMode == "empty") && isMobile)							// Mobiles need user to initiate touch before controlled play
				return;															// Quit
			playerMode="play";													// Set mode
 			if ((param != undefined) && (param != "")) {						// If playing to a time
				if ((""+param).match(/:/))										// In tc format
					param=TimecodeToSeconds(param);								// Convert to secs
				playerCurTime=playerNow=param;									// Set cur time
				}	
			else if (playerCurTime)												// No time set, so resume if not at start
				playerCurTime=playerNow=playerCurTime-0+.3						// Set cur time
			if (!player) {														// If no player yet
				return;															// Quit
				}
			if (playerType == "youtube") {										// If YouTube
				player.seekTo(playerNow,true);									// Cue
				if (playerMode == "play")		player.playVideo();				// Play
				else if (playerMode == "pause")	player.pauseVideo();			// Pause
				}
			else if (playerType == "vimeo") {									// If Vimeo
				player.contentWindow.postMessage("{\"method\":\"seekTo\",\"value\":\""+playerNow+"\"}","*");
				if (playerMode == "play")										// Play
					player.contentWindow.postMessage("{\"method\":\"play\"}","*");	// Send
				if (playerMode == "pause")										// Pause
					player.contentWindow.postMessage("{\"method\":\"pause\"}","*");	// Send
 				}
			else if (playerType == "html5") {									// If HTML5
				if (player.readyState)											// If ready
					player.currentTime=playerNow;								// Cue
				if (playerMode == "play")  	player.play(); 						// Play
				if (playerMode == "pause")	player.pause();						// Pause
				}
			if (playerMode == "play")	playerStarted=playerNow;				// Save start point
			}
		else if ((what == "scrub") || (what == "seek"))  {						// Scrub
			if ((playerMode == "empty") && isMobile)							// Mobiles need user to initiate touch before controlled play
				return;															// Quit
			playerCurTime=playerNow=param;										// Set now
			if (!player) 														// If no player yet
				return;															// Quit
			if (playerType == "youtube") 										// If YouTube
				player.seekTo(playerNow,true);									// Cue
			else if (playerType == "vimeo") 									// If Vimeo
				player.contentWindow.postMessage("{\"method\":\"seekTo\",\"value\":\""+playerNow+"\"}","*");
			else if (playerType == "html5") 									// If HTML5
				if (player.readyState)											// If ready
					player.currentTime=playerNow;								// Cue
				}
		else if (what == "pause") {												// Pause
			playerMode="pause";													// Set mode
			if (!player)	return;												// If no player yet, quit
			if (playerType == "youtube") 										// If YouTube
				player.pauseVideo();											// Pause
			else if (playerType == "vimeo") 									// If Vimeo
				player.contentWindow.postMessage("{\"method\":\"pause\"}","*");	// Send
 			else if (playerType == "html5") 									// If HTML5
				player.pause(); 												// Pause
			}
		else if (what == "volume") {											// Volume
			if (!player)	return;												// If no player yet, quit
			if (playerType == "youtube") 										// If YouTube
				player.setVolume(playerVolume);									// Set it
			else if (playerType == "vimeo") 									// If Vimeo
				player.contentWindow.postMessage("{\"method\":\"setVolume\",\"value\":\""+playerVolume/100+"\"}","*"); // Send
			else if (playerType == "html5") 									// If HTML5
				player.volume=playerVolume/100;								// Set
			}
		else if (what == "speed") {												// Speed
			if (!player)	return;												// If no player yet, quit
			s=Math.max(.25,playerSpeed/50);										// Speed set .25 to 2
			if (playerType == "youtube") 										// If initted YouTube
				player.setPlaybackRate(s);										// Set speed
			else if (playerType == "html5") 									// If HTML5
				player.playbackRate=s;											// Set speed
			}
		else if (what == "resize") {											// Resize
			if (!player)	return;												// If no player yet, quit
			var w=$("#playerDiv").width();										// Get width
			if (playerType == "youtube") 										// If initted YouTube
				player.setSize(w,w*playerAspect);								// Resize
			else if ((playerType == "vimeo") || (playerType == "html5")) {		// If Vimeo or HTML5
				$("#vplayer").width(w);											// Set width
				$("#vplayer").height(w*playerAspect);							// Set height
				}
			}
		else if (what == "ready") {												// When ready
			ResizePanes();														// Resize panes
			if (playerAuto == "true")											// If autoplay
				RunPlayer("play",playerStart);									// Play
			else if (playerStart) 												// Normal pause start
				RunPlayer("seek",playerStart);									// Seek
			$("#playerDiv").css("display","block");								// Show	
			}
		else if (what == "init") {												// Init player
			if (playerType == "youtube") {										// If YouTube
				$("#playerDiv").html("<div id='vplayer'></div>");				// Add holder div
	       		var pc=playerControls == "true" ? 1 : 0;						// Set player controls?
	       		player=new YT.Player("vplayer", {								// Init player
					playerVars:{ modestbranding:1, controls:pc, 				// Settings	
						disablekb:1, rel:0, showinfo:0, html5:1, autoplay:1 },
	          		videoId: playerSource,										// Set source
	         	 	events:{													// Add event handlers
	            		"onStateChange": function(s) {							// Change of state
		         			if (s.data == 1) {									// In play
							if (playerMode == "empty") {						// If first time playing
       							if (isMobile)									// If mobile
									player.seekTo(playerStart,true);			// Seek to start
								else											// Desktop   	
									player.pauseVideo();						// Pause
									}
								playerMode="play";								// Set mode
       							playerStarted=playerNow;						// Save start point
    							}
       						else if ((s.data == 2) || (s.data == 0)) 			// In pause
 								playerMode="pause";								// Set mode
        						},
	            		"onReady": function(s) { RunPlayer("ready") }			// When ready
		 	   			}});
					}
			else if (playerType == "vimeo") {									// If Vimeo
				str="<iframe id='vplayer' src='//player.vimeo.com/video/";		// Iframe start
				str+=playerSource;												// Add source
				str+="?api=1&player_id=vplayer' width='500' height='281' frameborder='0' allowFullScreen></iframe>";
				$("#playerDiv").html(str);										// Add vimeo iframe
		       	player=$("#vplayer")[0];										// Point to iframe
				}
			else if (playerType == "html5") {									// If HTML5
 				$("#playerDiv").html("");										// Add video tag
				var base=playerSource.match(/(.*)\.[^.]+$/i)[1];				// Extract base
				str="<video id='vplayer' width='100%' height='100%'";			// Video tag
				if ((playerControls == "true") || isMobile)						// If has controls or mobile
					str+= " controls";											// Add native controls to player
				str+=">";														// Close tag
				if (playerSource.match(/\.mp3/i)) 								// If audio
					str+="<source src='"+base+".mp3'  type='audio/mp3'>";		// MP3 Source
				else															// VIDEO
					str+="<source src='"+base+".mp4'  type='video/mp4'>";		// MP4 Source
				str+="</video>"
				$("#playerDiv").html(str);										// Add video tag
  				var myVid=document.getElementById("vplayer");					// Point at player	
				  
 				myVid.onloadstart=function() {									// When loaded
 					player=$("#vplayer")[0];									// Point to player
					player.readySent=false;										// Ready not sent
					};
								
				myVid.oncanplay=function() {									// When ready
					if (!playerSource.match(/\.mp3/i)) 							// If video
	     				playerAspect=player.videoHeight/player.videoWidth;		// Set aspect 				
					if (!player.readySent)										// Not sent yet
						RunPlayer("ready");										// Set up player		
					player.readySent=true;										// Ready sent
					};

 				myVid.onended=function() {										// When done
  					RunPlayer("pause");											// Pause
					};

				myVid.onplay=function() {										// When playing
					playerMode="play";											// Set mode
					playerStarted=playerNow;									// Save start point
					};

				myVid.onpause=function() {										// When paused
					playerMode="pause";											// Set mode
   					};
  		 		
 			  	myVid.addEventListener("loadstart",myVid.onloadstart);	 		// Add listener for safari
 		 		myVid.addEventListener("canplay",myVid.oncanplay);	 			// Add listener for safari
			  	myVid.addEventListener("ended",myVid.onended);	 				// Add listener for safari
 			  	myVid.addEventListener("play",myVid.onplay);	 				// Add listener for safari
 			  	myVid.addEventListener("pause",myVid.onpause);	 				// Add listener for safari
 	    		}
			}																	// End init
 	}																			// End closure

   function onYouTubeIframeAPIReady() 										// YOUTUBE PLAYER READY
    {   
		RunPlayer("init");														// Init player								
 	}

	function SendScaleMessage(cmd, msg)										// SEND MESSAGE TO CONTAINER
	{
		var str="ScaleVideo="+cmd;												// Add header				
		if (msg) str+="|"+msg;													// If more to it, add
		if (window.parent)														// If has a parent
			window.parent.postMessage(str,"*");									// Send message to parent wind
		else																	// Local	
			window.postMessage(str,"*");										// Send message to wind
	}

// //youtu.be/2doZROwdte4
// //www.kaltura.com/p/2003471/sp/0/playManifest/entryId/1_c7z7zuiv/format/url/flavorParamId/2003471.mp4
// //vimeo.com/274326838


	function GetDirectLink(url) 										// GET DRECT LINK TO  MEDIA
	{
		if (!url)																// If no url
			return "";															// Return null
		if (url.match(/youtube\.com/i))											// If Youtube link
			return url.match(/v=(.+)/i)[1];										// Extract id
		if (url.match(/youtu\.be/i))											// If Youtube embed
			return url.match(/be\/(.+)/i)[1];									// Extract id
		if (url.match(/vimeo\.com\//i))											// A Vimeo url or embed code
			return url.match(/vimeo.+\/(\d+)/i)[1];								// Extract id
		if (!url.match(/kaltura/))												// Not Kaltura
			return url;															// Return original
		var mid=0;																// Media id
		var pid=2003471;														// Collab partner id
		var flv=301971;															// Collab video flavor
		if (url.match(/<object/i)) {											// Object-style embed code
			mid=url.match(/kaltura_player_([^"]+)/i)[1];						// Get media id
			url="//www.kaltura.com/p/"+pid+"/sp/0/playManifest/entryId/"+mid+"/format/url/video.mp4"
			}
		else if (url.match(/<iframe/i)) {										// Iframe-style embed code
			pid=url.match(/partner_id\/(\d+)/i)[1];								// Get partner id
			mid=url.match(/entry_id=([^&]+)/)[1];								// Get media id
			flv="0_ithj599o";													// MP4 used by mediabase
			url="//www.kaltura.com/p/"+pid+"/sp/0/playManifest/entryId/"+mid+"/format/url/video.mp4"
			}
		else if (url.match(/embed/i)) {											// Kaltura link
			pid=url.match(/partner_id\/(\d+)/i)[1];								// Get partner id
			mid=url.match(/entry_id\/(\w+)/i)[1];								// Get media id
			url="//www.kaltura.com/p/"+pid+"/sp/0/playManifest/entryId/"+mid+"/format/url/video.mp4"
			}
		return url;																// Return converted url
	}

 	function shivaEventHandler(e)											// ON SHIVA EVENT
	{
		if (e.origin.match(/vimeo/i)) {											// From vimeo
    		var ev=$.parseJSON(e.data);											// Parse json
  			if (ev.event == "playProgress") {									// If playing			
				playerCurTime=ev.data.seconds;									// Set current time
				}
			else if (ev.event == "play") {										// If play			
				playerMode="play";												// Set mode
				playerStarted=playerNow;										// Save start point
 				}
			else if ((ev.event == "pause") || (ev.event == "finish")) {			// If pause/end			
				playerMode="pause";												// Set mode
     			}
			else if (ev.method == "getDuration") {								// If duration	
   				playerTRT=ev.value;												// Get duration
			   RunPlayer("ready");												// Set up player		
				}
 			else if (ev.method == "getVideoHeight") {							// If height	
 				playerHgt=ev.value;												// Set it
 				if (playerWid)													// If have both parts
 					playerAspect=playerHgt/playerWid;							// Calc asp		
				}
			else if (ev.method == "getVideoWidth") {							// If width	
 				playerWid=ev.value;												// Set it
 				if (playerHgt)													// If have both parts
 					playerAspect=playerHgt/playerWid;							// Calc asp		
				}
 			else if (ev.event == "ready"){										// If ready			
	 			var f=$("#vplayer");											// Point at iframe
				f[0].contentWindow.postMessage("{\"method\":\"addEventListener\",\"value\":\"play\"}","*");
				f[0].contentWindow.postMessage("{\"method\":\"addEventListener\",\"value\":\"pause\"}","*");
 				f[0].contentWindow.postMessage("{\"method\":\"addEventListener\",\"value\":\"playProgress\"}","*");
 				f[0].contentWindow.postMessage("{\"method\":\"getVideoHeight\"}","*");
 				f[0].contentWindow.postMessage("{\"method\":\"getVideoWidth\"}","*");
 				f[0].contentWindow.postMessage("{\"method\":\"getDuration\"}","*");
				}
			}	
		else if (e.data.match(/ScaleAct=/))	{									// If data
			var v=e.data.split("|");											// Split msg into parts
			if (v[0] == "ScaleAct=play") 										// PLAY
				RunPlayer("play",v[1] ? v[1] : "");								// Play 
			else if (v[0] == "ScaleAct=stop")									// STOP
				RunPlayer("pause");												// Pause
			else if (v[0] == "ScaleAct=pause")									// PAUSE
				RunPlayer("pause");												// Pause
			else if (v[0] == "ScaleAct=seek")									// SEEK
				RunPlayer("seek",v[1]);											// Seek
			}
		}
 
 
  	function trace(msg, p1, p2, p3, p4)										// CONSOLE 
	{
		if (p4 != undefined)
			console.log(msg,p1,p2,p3,p4);
		else if (p3 != undefined)
			console.log(msg,p1,p2,p3);
		else if (p2 != undefined)
			console.log(msg,p1,p2);
		else if (p1 != undefined)
			console.log(msg,p1);
		else
			console.log(msg);
	}

  	function trace2(msg)													// IOS TRACE 
	{
		$("#playerDiv").append(msg+" ");
	}
  
  </script>
  
  
</body>
</html>