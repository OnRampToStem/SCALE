<!DOCTYPE html>
<meta charset="utf-8">
<script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
<script src="https://d3js.org/d3.v3.min.js"></script>
<style type="text/css">
  
	.node {   			cursor: pointer;  }
 	.node circle {  	fill: #fff; stroke: steelblue;  stroke-width: 1.5px; }
  	.node text {    	font-size:13px;  font-family:sans-serif; }
   	.link {		    	fill: none; stroke: #ddd; stroke-width: 2px; }
  
</style>
<body>
    <div id="tree-container"></div>
</body>
</html>
<script>

var statusData={
    "name": "flare",
	"size":5,
    "children": [{
        "name": "analytics",
		"size":5,
		"children": [{
            "name": "cluster",
			"size":5,
           "children": [{
                "name": "AgglomerativeCluster",
                "size": 1
            }, {
                "name": "CommunityStructure",
                "size": 2
            }, {
                "name": "HierarchicalCluster",
                "size": 3
            }, {
                "name": "MergeEdge",
                "size": 4
            }]
        }, {
            "name": "graph",
			"size":5,
            "children": [{
                "name": "BetweennessCentrality",
                "size": 5
            }, {
                "name": "LinkDistance",
                "size": 10
            }, {
                "name": "MaxFlowMinCut",
                "size": 0
            }, {
                "name": "ShortestPaths",
                "size": 10
            }, {
                "name": "SpanningTree",
                "size": 10
            }]
        }, {
            "name": "optimization",
			"size":5,
            "children": [{
                "name": "AspectRatioBanker",
                "size": 0
            }]
        }]
    }, {
        "name": "animate",
		"size":5,
       "children": [{
            "name": "Easing",
            "size": 10
        }, {
            "name": "FunctionSequence",
            "size": 5
        }, {
            "name": "interpolate",
			"size":5,
           "children": [{
                "name": "ArrayInterpolator",
                "size": 1
            }, {
                "name": "ColorInterpolator",
                "size": 2
            }, {
                "name": "DateInterpolator",
                "size": 3
            }, {
                "name": "Interpolator",
                "size": 4
            }, {
                "name": "MatrixInterpolator",
                "size": 5
            }, {
                "name": "NumberInterpolator",
                "size": 6
            }, {
                "name": "ObjectInterpolator",
                "size": 7
            }, {
                "name": "PointInterpolator",
                "size": 8
            }, {
                "name": "RectangleInterpolator",
                "size": 9
            }]
         }]
    }]
}

   
Draw(statusData)

function Draw(treeData) 
{
	var totalNodes=0;
	var maxLabelLength=0;
	var panSpeed=200;
	var i=0;
	var duration=750;
	var root;
	var viewerWidth=$(document).width();
	var viewerHeight=$(document).height();
	var tree=d3.layout.tree().size([viewerHeight, viewerWidth]);
	var diagonal=d3.svg.diagonal()									// define a d3 diagonal projection for use by the node paths later on.
		.projection(function(d) {
		return [d.y, d.x];
		});

	function visit(parent, visitFn, childrenFn) {					// A recursive helper function for performing some setup by walking through all nodes
		if (!parent) return;
		visitFn(parent);
		var children = childrenFn(parent);
		if (children) {
			var count=children.length;
			for (var i=0; i<count;i++) 
				visit(children[i],visitFn,childrenFn);
			}
		}
	
	visit(treeData, function(d) {									// Call visit function to establish maxLabelLength
		totalNodes++;
		maxLabelLength = Math.max(d.name.length, maxLabelLength);
		}, function(d) {
		return d.children && d.children.length > 0 ? d.children : null;
		});

	function pan(domNode, direction)
	{
		var speed = panSpeed;
		if (panTimer) {
			clearTimeout(panTimer);
			translateCoords = d3.transform(svgGroup.attr("transform"));
			if (direction == 'left' || direction == 'right') {
				translateX = direction == 'left' ? translateCoords.translate[0] + speed : translateCoords.translate[0] - speed;
				translateY = translateCoords.translate[1];
			} else if (direction == 'up' || direction == 'down') {
				translateX = translateCoords.translate[0];
				translateY = direction == 'up' ? translateCoords.translate[1] + speed : translateCoords.translate[1] - speed;
			}
			scaleX = translateCoords.scale[0];
			scaleY = translateCoords.scale[1];
			scale = zoomListener.scale();
			svgGroup.transition().attr("transform", "translate(" + translateX + "," + translateY + ")scale(" + scale + ")");
			d3.select(domNode).select('g.node').attr("transform", "translate(" + translateX + "," + translateY + ")");
			zoomListener.scale(zoomListener.scale());
			zoomListener.translate([translateX, translateY]);
			panTimer = setTimeout(function() {
				pan(domNode, speed, direction);
			}, 50);
		}
	}

	function zoom() {
		svgGroup.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
		}
	
	var zoomListener = d3.behavior.zoom().scaleExtent([0.1, 3]).on("zoom", zoom);

// define the baseSvg, attaching a class for styling and the zoomListener
var baseSvg = d3.select("#tree-container").append("svg")
	.attr("width", viewerWidth-10)
	.attr("height", viewerHeight-20)
	.call(zoomListener);


// Helper functions for collapsing and expanding nodes.

function collapse(d) {
	if (d.children) {
		d._children = d.children;
		d._children.forEach(collapse);
		d.children = null;
	}
}

function expand(d) {
	if (d._children) {
		d.children = d._children;
		d.children.forEach(expand);
		d._children = null;
	}
}

// Function to center node when clicked/dropped so node doesn't get lost when collapsing/moving with large amount of children.

function centerNode(source) {
	scale = zoomListener.scale();
	x = -source.y0;
	y = -source.x0;
	x = x * scale + viewerWidth / 2;
	x=Math.min(x,viewerWidth / 4)
	y = y * scale + viewerHeight / 2;
	d3.select('g').transition()
		.duration(duration)
		.attr("transform", "translate(" + x + "," + y + ")scale(" + scale + ")");
	zoomListener.scale(scale);
	zoomListener.translate([x, y]);
}

function startNode(source) {
	scale = zoomListener.scale();
	x = -source.y0;
	y = -source.x0;
	x = x * scale + viewerWidth / 8;
	y = y * scale + viewerHeight / 2;
	d3.select('g').transition()
		.duration(duration)
		.attr("transform", "translate(" + x + "," + y + ")scale(" + scale + ")");
	zoomListener.scale(scale);
	zoomListener.translate([x, y]);
}

// Toggle children function

function toggleChildren(d) {
	if (d.children) {
		d._children = d.children;
		d.children = null;
	} else if (d._children) {
		d.children = d._children;
		d._children = null;
	}
	return d;
}

// Toggle children on click.

function click(d) {
	if (d3.event.defaultPrevented) return; // click suppressed
	d = toggleChildren(d);
	update(d);
	centerNode(d);
}

function update(source) {
	// Compute the new height, function counts total children of root node and sets tree height accordingly.
	// This prevents the layout looking squashed when new nodes are made visible or looking sparse when nodes are removed
	// This makes the layout more consistent.
	var levelWidth = [1];
	var childCount = function(level, n) {

		if (n.children && n.children.length > 0) {
			if (levelWidth.length <= level + 1) levelWidth.push(0);

			levelWidth[level + 1] += n.children.length;
			n.children.forEach(function(d) {
				childCount(level + 1, d);
			});
		}
	};
	childCount(0, root);
	var newHeight = d3.max(levelWidth) * 25; // 25 pixels per line  
	tree = tree.size([newHeight, viewerWidth]);

	// Compute the new tree layout.
	var nodes = tree.nodes(root).reverse(),
		links = tree.links(nodes);

	// Set widths between levels based on maxLabelLength.
	nodes.forEach(function(d) {
		d.y = (d.depth * (maxLabelLength * 10)); //maxLabelLength * 10px
		// alternatively to keep a fixed scale one can set a fixed depth per level
		// Normalize for fixed-depth by commenting out below line
		// d.y = (d.depth * 500); //500px per level.
	});

	// Update the nodesâ€¦
	node = svgGroup.selectAll("g.node")
		.data(nodes, function(d) {
			return d.id || (d.id = ++i);
		});

	// Enter any new nodes at the parent's previous position.
	var nodeEnter = node.enter().append("g")
		.attr("class", "node")
		.attr("transform", function(d) {
			return "translate(" + source.y0 + "," + source.x0 + ")";
		})
		.on('click', click);

	nodeEnter.append("circle")
		.attr('class', 'nodeCircle')
		.attr("r", 0)
		.style("fill", function(d) {
			return d._children ? "lightsteelblue" : "#fff";
		});

	nodeEnter.append("text")
		.attr("x", function(d) {
			return d.children || d._children ? -10 : 10;
		})
		.attr("dy", ".35em")
		.attr('class', 'nodeText')
		.attr("text-anchor", function(d) {
			return d.children || d._children ? "end" : "start";
		})
		.text(function(d) {
			return `${d.name} (${d.size})`;
		})
		.style("fill-opacity", 0);

	// Update the text to reflect whether node has children or not.
	node.select('text')
		.attr("x", function(d) {
			return d.children || d._children ? -10 : 10;
			})
		.attr("text-anchor", function(d) {
			return d.children || d._children ? "end" : "start";
			})
		.style("fill", function(d) {
			if (d.size >= 10)	return "#008800";
			if (d.size >= 5)	return "#b77d0a";
			return "#000088";
			})
		.text(function(d) {
			return `${d.name} (${d.size})`;
			});

	// Change the circle fill depending on whether it has children and is collapsed
	node.select("circle.nodeCircle")
		.attr("r", 4.5)
		.style("fill", function(d) {
			return d._children ? "lightsteelblue" : "#fff";
		});

	// Transition nodes to their new position.
	var nodeUpdate = node.transition()
		.duration(duration)
		.attr("transform", function(d) {
			return "translate(" + d.y + "," + d.x + ")";
		});

	// Fade the text in
	nodeUpdate.select("text")
		.style("fill-opacity", 1);

	// Transition exiting nodes to the parent's new position.
	var nodeExit = node.exit().transition()
		.duration(duration)
		.attr("transform", function(d) {
			return "translate(" + source.y + "," + source.x + ")";
		})
		.remove();

	nodeExit.select("circle")
		.attr("r", 0);

	nodeExit.select("text")
		.style("fill-opacity", 0);

	// Update the linksâ€¦
	var link = svgGroup.selectAll("path.link")
		.data(links, function(d) {
			return d.target.id;
		});

	// Enter any new links at the parent's previous position.
	link.enter().insert("path", "g")
		.attr("class", "link")
		.attr("d", function(d) {
			var o = {
				x: source.x0,
				y: source.y0
			};
			return diagonal({
				source: o,
				target: o
			});
		});

	// Transition links to their new position.
	link.transition()
		.duration(duration)
		.attr("d", diagonal);

	// Transition exiting nodes to the parent's new position.
	link.exit().transition()
		.duration(duration)
		.attr("d", function(d) {
			var o = {
				x: source.x,
				y: source.y
			};
			return diagonal({
				source: o,
				target: o
			});
		})
		.remove();

	// Stash the old positions for transition.
	nodes.forEach(function(d) {
		d.x0 = d.x;
		d.y0 = d.y;
	});
}

// Append a group which holds all nodes and which the zoom Listener can act upon.
var svgGroup = baseSvg.append("g");

// Define the root
root = treeData;
root.x0 = viewerHeight / 2;
root.y0 = 0

// Layout the tree initially and center on the root node.
update(root);
startNode(root)
}

</script>
</body>
</html>
